@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })

<section id="content">
    <div class="container">
        <div class="content-detail">
            <div class="product-detail">
                <div class="row">
                    <div class="col-md-5 col-sm-6 col-xs-12">
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        <!-- End Gallery -->
                    </div>
                    <div class="col-md-7 col-sm-6 col-xs-12">
                        <div class="detail-info">
                            <h2 class="title-detail title30">@Model.Name</h2>
                            <ul class="list-inline-block sku-stock">
                                <li>
                                    <!--SKU, MAN, GTIN, vendor-->
                                    @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                                </li>
                                <li>
                                    @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                </li>
                                @*<li><span class="inout-stock in-stock"><i class="fa fa-check-square" aria-hidden="true"></i>In stock</span></li>*@
                            </ul>
                            <div class="product-price">
                                @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                                {
                                    <del><span class="title14 silver">@Model.ProductPrice.Price</span></del>
                                }
                                <ins><span class="title14 color">@Model.ProductPrice.Price</span></ins>

                            </div>
                            <p class="desc">@Model.ShortDescription</p>
                            @*<div class="filter-color">
                                <h3 class="title14">Color</h3>
                                <ul class="list-inline-block">
                                    <li><a href="#" style="background:#ffffff;border:1px solid #e5e5e5"></a></li>
                                    <li><a href="#" style="background:#e66054"></a></li>
                                    <li><a class="active" href="#" style="background:#d0b7cc"></a></li>
                                    <li><a href="#" style="background:#107a8e"></a></li>
                                    <li><a href="#" style="background:#b9cad2"></a></li>
                                    <li><a href="#" style="background:#a7bc93"></a></li>
                                    <li><a href="#" style="background:#d3b627"></a></li>
                                    <li><a href="#" style="background:#b4b3ae"></a></li>
                                    <li><a href="#" style="background:#502006"></a></li>
                                    <li><a href="#" style="background:#311e21"></a></li>
                                    <li><a href="#" style="background:#e6b3af"></a></li>
                                    <li><a href="#" style="background:#f3d213"></a></li>
                                    <li><a href="#" style="background:#bd0316"></a></li>
                                    <li><a href="#" style="background:#ff607c"></a></li>
                                </ul>
                            </div>
                            <div class="filter-size">
                                <h3 class="title14">Size</h3>
                                <ul class="list-inline-block">
                                    <li><a href="#">s</a></li>
                                    <li class="active"><a href="#">m</a></li>
                                    <li><a href="#">l</a></li>
                                    <li><a href="#">2xl</a></li>
                                    <li><a href="#">3xl</a></li>
                                </ul>
                            </div>*@
                            <ul class="list-inline-block qty-cart">
                                <li>
                                    <h3 class="title14">Qty</h3>
                                </li>
                                <li>
                                    <div class="detail-qty">
                                        <span class="qty-val">1</span>
                                        <a href="#" class="qty-up"><i class="fa fa-plus" aria-hidden="true"></i></a>
                                        <a href="#" class="qty-down"><i class="fa fa-minus" aria-hidden="true"></i></a>
                                    </div>
                                </li>
                                <li><a href="#" class="title14 shop-button">Add to cart</a></li>
                            </ul>
                            <div class="product-extra-link">
                                <a href="#" class="wishlist-link"></a>
                                <a href="#" class="compare-link"></a>
                            </div>
                            <div class="detail-tags">
                                <label class="title14">Tags:</label>
                                <a href="#">sport</a>
                                <a href="#">shoes</a>
                                <a href="#">clothing</a>
                                <a href="#">adidas</a>
                                <a href="#">nike</a>
                                <a href="#">puma</a>
                                <a href="#">hockey</a>
                                <a href="#">tennis</a>
                            </div>
                            <div class="detail-social">
                                <img src="images/shop/social.png" alt="" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                    <!--product pictures-->
                    @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                    <div class="overview">
                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1 itemprop="name">
                                @Model.Name
                            </h1>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--price & add to cart-->
                        @{
                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                        }
                        <!--wishlist, compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                            @{
                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                            }
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                        </div>
                        @await Html.PartialAsync("_ShareButton", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                    </div>
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description" itemprop="description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
                <div class="product-collateral">
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
    </div>
</div>
