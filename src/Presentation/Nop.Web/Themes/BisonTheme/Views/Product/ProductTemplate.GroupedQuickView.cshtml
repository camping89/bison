@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo
@inject SeoSettings seoSettings
@{
    Layout = "_QuickViewLayout";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })

<section id="content">
    <div class="container">
        <div class="content-detail">
            <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
                <div class="product-detail">
                    <div class="row">
                        <div class="col-md-5 col-sm-6 col-xs-12">
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            <!-- End Gallery -->
                        </div>
                        <div class="col-md-7 col-sm-6 col-xs-12">
                            <div class="detail-info">
                                <h2 class="title-detail title30">@Model.Name</h2>

                                <p class="desc">@Html.Raw(Model.ShortDescription)</p>

                                @await Html.PartialAsync("_ProductTags", Model.ProductTags)

                                <div class="detail-social">
                                    @await Html.PartialAsync("_ShareButton", Model)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="detail-tabs">
                    <div class="title-tab-detail">
                        <ul class="list-inline-block">
                            <li class="active"><a href="#tab1" class="title14" data-toggle="tab">@T("ProductDetail.Description")</a></li>
                            <li><a href="#tab2" class="title14" data-toggle="tab">@T("Products.Specs")</a></li>
                        </ul>
                    </div>
                    <div class="tab-content">
                        <div id="tab1" class="tab-pane active">
                            <div class="detail-descript">
                                @if (!string.IsNullOrEmpty(Model.FullDescription))
                                {
                                    <div class="full-description" itemprop="description">
                                        @Html.Raw(Model.FullDescription)
                                    </div>
                                }
                            </div>
                        </div>
                        <div id="tab2" class="tab-pane">
                            @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                        </div>
                    </div>
                </div>
                <!-- End Detail Tabs -->
                <div class="product-collateral">
                    <!--associated products-->
                    <div class="product-variant-list">
                        @foreach (var variant in Model.AssociatedProducts)
                        {
                        <div class="product-variant-line" data-productid="@variant.Id">
                            @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                {
                            <div class="variant-picture">
                                <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                     title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                            </div>
                                }
                            <div class="variant-overview">
                                @if (!string.IsNullOrWhiteSpace(variant.Name))
                                    {
                                <div class="variant-name">
                                    @variant.Name
                                </div>
                                    }
                                @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                                    {
                                <div class="variant-description">
                                    @Html.Raw(variant.ShortDescription)
                                </div>
                                    }
                                <!--availability-->
                                @await Html.PartialAsync("_Availability", variant)
                                <!--SKU, MAN, GTIN, vendor-->
                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                <!--delivery-->
                                @await Html.PartialAsync("_DeliveryInfo", variant)
                                <!--sample download-->
                                @await Html.PartialAsync("_DownloadSample", variant)
                                <!--attributes-->
                                @{
                                        var dataDictAttributes = new ViewDataDictionary(ViewData);
                                        dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                }
                                <!--gift card-->
                                @{
                                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                    @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                }
                                <!--rental info-->
                                @{
                                        var dataDictRental = new ViewDataDictionary(ViewData);
                                        dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                    @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                }
                                <!--price & add to cart-->
                                @{
                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                        if (Model.ProductPrice.CallForPrice == false)
                                        {
                                    @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                        }
                                        else
                                        {
                                    <div class="prices" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                                        <div class="product-price call-for-price">
                                            <span>@T("Products.CallForPrice")</span>
                                        </div>
                                    </div>
                                        }
                                }

                                <!--price breaks-->
                                @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                            </div>
                        </div>
                        }
                        @if (Model.AssociatedProducts.Count == 0)
                        {
                        <div class="no-associated-products">
                            @T("Products.NoAssociatedProducts")
                        </div>
                        }
                    </div>
                </div>
            </form>

        </div>
    </div>
</section>

