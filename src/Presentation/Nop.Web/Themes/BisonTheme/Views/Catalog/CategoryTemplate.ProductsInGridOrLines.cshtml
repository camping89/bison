@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

}
@section left
    {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
    @*@await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })*@
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })
    @*@await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId, manufacturers = Model.Manufacturers })*@
    @*@await Component.InvokeAsync("VendorNavigation")*@

    @await Html.PartialAsync("_FilterAjax", Model.PagingFilteringContext.SpecificationFilter)

    @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
    @*@await Component.InvokeAsync("PopularProductTags")*@
    @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })
}


@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="bread-crumb">
            <a href="@Url.RouteUrl("HomePage")" class="silver" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
            @foreach (var cat in Model.CategoryBreadcrumb)
            {
                var isLastCategory = cat.Id == Model.Id;
                if (isLastCategory)
                {
                    <strong class="color">@cat.Name</strong>
                }
                else
                {
                    <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" class="silver" title="@cat.Name">@cat.Name</a>
                    @*<span class="delimiter">@breadcrumbDelimiter</span>*@
                }

            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_breadcrumb", additionalData = Model.Id })
    }
    else
    {
        <div class="bread-crumb">
            @*<a href="@Url.RouteUrl("HomePage")" class="silver" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                <strong class="color">@T("Search")</strong>*@
        </div>
    }
}

<input type="hidden" id="cid" value="@currentCategoryId" />
<script type="text/javascript" asp-location="Footer">
    $(function () {
        searchParameters();
    });
</script>

<div class="content-shop shop-grid">
    <div class="shop-title-box">
        <h2 class="title18 title-box5">@Model.Name</h2>
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_featured_products", additionalData = Model.Id })
        @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)

    </div>
    <div class="filter-ajax-result">

    </div>

</div>
